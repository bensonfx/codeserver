#!/bin/sh
CWD=$(cd `dirname $0`;pwd)
BUILD_SCRIPT=${CWD}/image/gerrit-fetch.sh
STABLE_VERSION=2.16.6
GERRIT_WAR_URL="http://repo1.maven.org/maven2/com/google/gerrit/gerrit-war/${GERRIT_VERSION}/gerrit-war-${GERRIT_VERSION}.war"
old_wars=$(cd $CWD;find image/bin -name gerrit*.war)
GERRIT_URL="https://github.com/GerritCodeReview/gerrit"
GERRIT_SRC_DIR=${CWD}/image/gerrit

fetch_source() {
    #fetch latest gerrit source
    if [ ! -d ${GITLAB_REPO} ];then
        git clone ${GERRIT_URL} ${GERRIT_SRC_DIR}
    fi
}

clean_old_wars() {
    [ -z "$old_wars" ] && return
    for war in $old_wars;do
        [ "$war" = "$target_war" ] && continue
        rm -fv $war
    done
}

clean_old_images() {
    [ -z "$(docker images -q bensonfx/gerrit:${RELEASE_VERSION})" ] && return
    for tag in $old_images;do
        [ "$tag" != "$RELEASE_VERSION" ] && docker rmi -f bensonfx/gerrit:$tag
    done
}

help() {
    printf "usage:
    $0 reset            -> reset the change of the config
    $0 release/stable   -> build latest stable version
    $0 master           -> build master version
"

}

get_gerrit_war() {
    cd ${CWD}
    case $param in
        master)
            fetch_source
            sed -ri "s@^default_version=.*@default_version=bazel-master@g" ${BUILD_SCRIPT}

            cd ${GERRIT_SRC_DIR}
            git checkout master
            git pull -v
            git submodule update --recursive
            bazel build release
            cd -

            source_war=${GERRIT_SRC_DIR}/bazel-bin/release.war
            RELEASE_VERSION=$(java -jar $source_war version|grep -oE '[0-9].[0-9\.]+-[0-9]+')
            old_images=$(docker images bensonfx/gerrit | grep -oE "*[0-9.]+-[0-9]+")
            ;;
        release|stable)
            sed -ri "s@^default_version=.*@default_version=bazel-stable-\$suffix@g" ${BUILD_SCRIPT}
            source_war=image/bin/stable.war
            if [ ! -f "${source_war}" ];then
                curl -L ${GERRIT_WAR_URL} -o ${STABLE_GERRIT_WAR}
            fi
            RELEASE_VERSION=${STABLE_VERSION}
            old_images=$(docker images bensonfx/gerrit | grep -oE "[0-9]\.[0-9]+[0-9.]*"|head -1)
            ;;
        *)
            return
    esac
    ./update_version $RELEASE_VERSION master
    target_war=image/bin/gerrit-${RELEASE_VERSION}.war
    [ -f "${target_war}" ] || cp -fv "$source_war" "$target_war"
}

buid_gerrit_docker_image() {
    param=${1:-release}
    case $param in
    reset)
        git checkout -- ${BUILD_SCRIPT}
        ./update_version $STABLE_VERSION
        ;;
    master|release|stable)
        get_gerrit_war $param
        clean_old_wars

        docker-compose build --no-cache gerrit
        clean_old_images
        ;;
    *)
        help
    esac
}

########## main start #############
buid_gerrit_docker_image $@
